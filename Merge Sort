import java.util
class mergesort
{
  static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
    
    public static void main(String args[])
    {
      Scanner sc = new Scanner(System.in);
      //for no of test cases
      int T =sc.nextInt();
      while(T>0)
      {
        int n = sc.nextInt();
        mergesort ms = new mergesort();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
        {
          arr[i]=sc.nextInt();
        }
        Solution g = new Solution();
        g.mergeSort(arr,0,arr.length-1);
        ms.printArray(arr);
        T--;
      }
    }
    
}


class Solution
{
    void merge(int arr[], int l, int m, int r)
    {
         //Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;
         //create temp arrays
         int L[] = new int[n1];
        int R[] = new int[n2];
         
         //copy the data to the temp arrays
         for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];
        
         /* Merge the temp arrays */
 
        // Initial indexes of first and second subarrays
        int i = 0, j = 0; //for temp arrays
        
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
 
        /* Copy remaining elements of R[] if any */
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
        
    }
    void mergeSort(int arr[], int l, int r)
    {
        if (l < r) {
            // Find the middle point
            int m =l+ (r-l)/2;
 
            // Sort first and second halves
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
 
            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }
}
